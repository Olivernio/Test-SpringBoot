{
	"info": {
		"_postman_id": "2087b651-5447-4103-996a-efbaefb7a1ec",
		"name": "Edutech",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13642119"
	},
	"item": [
		{
			"name": "ms-courses",
			"item": [
				{
					"name": "course-categories",
					"item": [
						{
							"name": "/api/course-categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the response object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category).to.be.an('object');",
											"        pm.expect(category.id).to.exist.and.to.be.a('number');",
											"        pm.expect(category.name).to.exist.and.to.be.a('string');",
											"        pm.expect(category.description).to.exist.and.to.be.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name and description are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"        pm.expect(category.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category.id).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/course-categories",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"course-categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course-categories/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.name).to.exist;",
											"    pm.expect(responseData.description).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.id).to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Description is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/course-categories/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"course-categories",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course-categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('description');",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Description is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"name\": \"Test\",\r\n        \"description\": \"Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/api/course-categories",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"course-categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course-categories/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('description');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name and description must be non-empty strings\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"id\": 1,\r\n        \"name\": \"Test\",\r\n        \"description\": \"Categoría de Programación\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/api/course-categories/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"course-categories",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course-categories/{id}",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/api/course-categories/3",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"course-categories",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "course",
					"item": [
						{
							"name": "/api/course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the response object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category).to.be.an('object');",
											"        pm.expect(category.id).to.exist.and.to.be.a('number');",
											"        pm.expect(category.name).to.exist.and.to.be.a('string');",
											"        pm.expect(category.description).to.exist.and.to.be.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name and description are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"        pm.expect(category.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category.id).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:9002/api/course",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.name).to.exist;",
											"    pm.expect(responseData.description).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.id).to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Description is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9002/api/course/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('description');",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Description is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"name\": \"Test\",\r\n        \"description\": \"Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:9002/api/course",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('description');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name and description must be non-empty strings\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"id\": 1,\r\n        \"name\": \"Test\",\r\n        \"description\": \"Categoría de Programación\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:9002/api/course/1",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course/{id}",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:9002/api/course/3",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the response object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category).to.be.an('object');",
											"        pm.expect(category.id).to.exist.and.to.be.a('number');",
											"        pm.expect(category.name).to.exist.and.to.be.a('string');",
											"        pm.expect(category.description).to.exist.and.to.be.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name and description are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"        pm.expect(category.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category.id).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:9002/api/course",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.name).to.exist;",
											"    pm.expect(responseData.description).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.id).to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Description is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9002/api/course/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('description');",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Description is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"name\": \"Test\",\r\n        \"description\": \"Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:9002/api/course",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('description');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name and description must be non-empty strings\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"id\": 1,\r\n        \"name\": \"Test\",\r\n        \"description\": \"Categoría de Programación\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:9002/api/course/1",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course/{id}",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:9002/api/course/3",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course",
										"3"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Servicio de Identidad",
			"item": [
				{
					"name": "/api/roles",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/roles/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response includes the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('id', 'firstName', 'lastName', 'email', 'passwordHash', 'roleId', 'isActive', 'createdAt', 'updatedAt');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/, \"Email should be in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and updatedAt are in valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
									"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/roles",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"firstName\": \"Admin2\",\r\n    \"lastName\": \"Principal\",\r\n    \"email\": \"admin2@edu.cl\",\r\n    \"passwordHash\": \"hashedpassword\",\r\n    \"roleId\": 1,\r\n    \"isActive\": true,\r\n    \"createdAt\": \"2025-05-17T19:59:41Z\",\r\n    \"updatedAt\": \"2025-05-17T19:59:41Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/roles/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist;",
									"  pm.expect(responseData.firstName).to.exist;",
									"  pm.expect(responseData.lastName).to.exist;",
									"  pm.expect(responseData.email).to.exist;",
									"  pm.expect(responseData.passwordHash).to.exist;",
									"  pm.expect(responseData.roleId).to.exist;",
									"  pm.expect(responseData.isActive).to.exist;",
									"  pm.expect(responseData.createdAt).to.exist;",
									"  pm.expect(responseData.updatedAt).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and updatedAt are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
									"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
									"});",
									"",
									"",
									"pm.test(\"IsActive field is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.isActive).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"firstName\": \"Test\",\r\n    \"lastName\": \"Principal\",\r\n    \"email\": \"admin@edu.cl\",\r\n    \"passwordHash\": \"hashedpassword\",\r\n    \"roleId\": 1,\r\n    \"isActive\": true,\r\n    \"createdAt\": \"2025-05-17T19:59:41Z\",\r\n    \"updatedAt\": \"2025-05-17T19:59:41Z\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/users/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/roles/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/users/9",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(user => {",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('firstName');",
									"        pm.expect(user).to.have.property('lastName');",
									"        pm.expect(user).to.have.property('email');",
									"        pm.expect(user).to.have.property('passwordHash');",
									"        pm.expect(user).to.have.property('roleId');",
									"        pm.expect(user).to.have.property('isActive');",
									"        pm.expect(user).to.have.property('createdAt');",
									"        pm.expect(user).to.have.property('updatedAt');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and updatedAt are in valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"        pm.expect(user.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"IsActive field is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user.isActive).to.be.a('boolean');",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/users/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.firstName).to.exist;",
									"    pm.expect(responseData.lastName).to.exist;",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.passwordHash).to.exist;",
									"    pm.expect(responseData.roleId).to.exist;",
									"    pm.expect(responseData.isActive).to.exist;",
									"    pm.expect(responseData.createdAt).to.exist;",
									"    pm.expect(responseData.updatedAt).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and UpdatedAt are in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
									"  pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/users",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"firstName\": \"Admin2\",\r\n    \"lastName\": \"Principal\",\r\n    \"email\": \"admin2@edu.cl\",\r\n    \"passwordHash\": \"hashedpassword\",\r\n    \"roleId\": 1,\r\n    \"isActive\": true,\r\n    \"createdAt\": \"2025-05-17T19:59:41Z\",\r\n    \"updatedAt\": \"2025-05-17T19:59:41Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/users/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('firstName');",
									"    pm.expect(responseData).to.have.property('lastName');",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData).to.have.property('passwordHash');",
									"    pm.expect(responseData).to.have.property('roleId');",
									"    pm.expect(responseData).to.have.property('isActive');",
									"    pm.expect(responseData).to.have.property('createdAt');",
									"    pm.expect(responseData).to.have.property('updatedAt');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.email).to.be.a('string');",
									"  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									"",
									"pm.test(\"IsActive field must be a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.isActive).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and UpdatedAt are in valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
									"  pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"firstName\": \"Test\",\r\n    \"lastName\": \"Principal\",\r\n    \"email\": \"admin@edu.cl\",\r\n    \"passwordHash\": \"hashedpassword\",\r\n    \"roleId\": 1,\r\n    \"isActive\": true,\r\n    \"createdAt\": \"2025-05-17T19:59:41Z\",\r\n    \"updatedAt\": \"2025-05-17T19:59:41Z\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/users/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/users/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/users/9",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"9"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestion de Matriculas",
			"item": [
				{
					"name": "/api/enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(enrollment) {",
									"        pm.expect(enrollment).to.be.an('object');",
									"        pm.expect(enrollment).to.have.property('id');",
									"        pm.expect(enrollment).to.have.property('studentId');",
									"        pm.expect(enrollment).to.have.property('courseId');",
									"        pm.expect(enrollment).to.have.property('enrolledAt');",
									"        pm.expect(enrollment).to.have.property('status');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"EnrolledAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(enrollment) {",
									"    pm.expect(enrollment.enrolledAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/enrollments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/enrollments/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('studentId');",
									"    pm.expect(responseData).to.have.property('courseId');",
									"    pm.expect(responseData).to.have.property('enrolledAt');",
									"    pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"EnrolledAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.enrolledAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/enrollments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"enrollments",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('studentId');",
									"    pm.expect(responseData).to.have.property('courseId');",
									"    pm.expect(responseData).to.have.property('enrolledAt');",
									"    pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"EnrolledAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.enrolledAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"StudentId and courseId are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.studentId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"StudentId should be a non-negative integer\");",
									"    pm.expect(responseData.courseId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"CourseId should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n        \"studentId\": 21,\r\n        \"courseId\": 10,\r\n        \"enrolledAt\": \"2024-01-10T00:00:00Z\",\r\n        \"status\": \"Enabled\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/enrollments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/enrollments/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('id', 'studentId', 'courseId', 'enrolledAt', 'status');",
									"});",
									"",
									"",
									"pm.test(\"EnrolledAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.enrolledAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n        \"id\": 1,\r\n        \"studentId\": 21,\r\n        \"courseId\": 10,\r\n        \"enrolledAt\": \"2024-01-09T00:00:00Z\",\r\n        \"status\": \"Enabled\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/enrollments/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"enrollments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/enrollments/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/course-categories/3",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-categories",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestion de Pagos",
			"item": [
				{
					"name": "/api/payments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(payment) {",
									"        pm.expect(payment).to.include.all.keys('id', 'userId', 'amount', 'paymentDate', 'paymentMethod', 'paymentInstitution', 'transactionId', 'status');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Payment date is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(payment) {",
									"        pm.expect(payment.paymentDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Amount is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(payment) {",
									"        pm.expect(payment.amount).to.be.a('number').and.to.be.at.least(0, \"Amount should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response contains an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/payments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/payments/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('userId');",
									"    pm.expect(responseData).to.have.property('amount');",
									"    pm.expect(responseData).to.have.property('paymentDate');",
									"    pm.expect(responseData).to.have.property('paymentMethod');",
									"    pm.expect(responseData).to.have.property('paymentInstitution');",
									"    pm.expect(responseData).to.have.property('transactionId');",
									"    pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"Amount is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.amount).to.be.a('number').and.to.be.at.least(0, \"Amount should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Payment date is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.paymentDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Payment method and institution should be non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"    ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.paymentMethod).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.paymentInstitution).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/payments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"payments",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/payments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.userId).to.exist;",
									"    pm.expect(responseData.amount).to.exist;",
									"    pm.expect(responseData.paymentDate).to.exist;",
									"    pm.expect(responseData.paymentMethod).to.exist;",
									"    pm.expect(responseData.paymentInstitution).to.exist;",
									"    pm.expect(responseData.transactionId).to.exist;",
									"    pm.expect(responseData.status).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Amount is a non-negative number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.amount).to.be.a('number').and.to.be.at.least(0, \"Amount should be a non-negative number\");",
									"});",
									"",
									"",
									"pm.test(\"Payment Date is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.paymentDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"TransactionId is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.transactionId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"TransactionId should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 23,\r\n    \"amount\": 110.000,\r\n    \"paymentDate\": \"2024-02-10T00:00:00Z\",\r\n    \"paymentMethod\": \"Credit Card\",\r\n    \"paymentInstitution\": \"BancoEstado\",\r\n    \"transactionId\": \"TXN00001\",\r\n    \"status\": \"Completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/payments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/payments/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the response fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('userId');",
									"    pm.expect(responseData).to.have.property('amount');",
									"    pm.expect(responseData).to.have.property('paymentDate');",
									"    pm.expect(responseData).to.have.property('paymentMethod');",
									"    pm.expect(responseData).to.have.property('paymentInstitution');",
									"    pm.expect(responseData).to.have.property('transactionId');",
									"    pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"PaymentDate is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.paymentDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Id, userId, amount, paymentDate, paymentMethod, paymentInstitution, transactionId, and status fields exist and are not empty\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
									"  pm.expect(responseData.userId).to.exist.and.to.not.be.empty;",
									"  pm.expect(responseData.amount).to.exist.and.to.not.be.empty;",
									"  pm.expect(responseData.paymentDate).to.exist.and.to.not.be.empty;",
									"  pm.expect(responseData.paymentMethod).to.exist.and.to.not.be.empty;",
									"  pm.expect(responseData.paymentInstitution).to.exist.and.to.not.be.empty;",
									"  pm.expect(responseData.transactionId).to.exist.and.to.not.be.empty;",
									"  pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"userId\": 23,\r\n    \"amount\": 110.000,\r\n    \"paymentDate\": \"2024-02-10T00:00:00Z\",\r\n    \"paymentMethod\": \"Credit Card\",\r\n    \"paymentInstitution\": \"BancoEstado\",\r\n    \"transactionId\": \"TXN00001\",\r\n    \"status\": \"Completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/payments/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"payments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/payments/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/payments/3",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"payments",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestion de Cupones de Descuento",
			"item": [
				{
					"name": "/api/discount-coupons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(coupon) {",
									"        pm.expect(coupon).to.have.property('id');",
									"        pm.expect(coupon).to.have.property('code');",
									"        pm.expect(coupon).to.have.property('description');",
									"        pm.expect(coupon).to.have.property('discountPercentage');",
									"        pm.expect(coupon).to.have.property('validFrom');",
									"        pm.expect(coupon).to.have.property('validUntil');",
									"        pm.expect(coupon).to.have.property('isActive');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"ValidFrom and ValidUntil dates are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(coupon) {",
									"        pm.expect(coupon.validFrom).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"        pm.expect(coupon.validUntil).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Code is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");",
									"    });",
									"});",
									"",
									"pm.test(\"DiscountPercentage is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.discountPercentage).to.be.a('number').and.to.be.at.least(0, \"DiscountPercentage should be non-negative\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that 'isActive' field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(coupon) {",
									"        pm.expect(coupon.isActive).to.be.a('boolean');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/discount-coupons",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"discount-coupons"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/discount-coupons/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('description');",
									"    pm.expect(responseData).to.have.property('discountPercentage');",
									"    pm.expect(responseData).to.have.property('validFrom');",
									"    pm.expect(responseData).to.have.property('validUntil');",
									"    pm.expect(responseData).to.have.property('isActive');",
									"});",
									"",
									"",
									"pm.test(\"Code is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"DiscountPercentage is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.discountPercentage).to.be.a('number');",
									"    pm.expect(responseData.discountPercentage).to.be.at.least(0, \"Discount percentage should be non-negative\");",
									"});",
									"",
									"",
									"pm.test(\"ValidFrom and ValidUntil are in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('validFrom').that.is.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"  pm.expect(responseData).to.have.property('validUntil').that.is.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/discount-coupons/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"discount-coupons",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/discount-coupons",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"DESC06\",\r\n    \"description\": \"Test\",\r\n    \"discountPercentage\": 27.00,\r\n    \"validFrom\": \"2024-01-01\",\r\n    \"validUntil\": \"2024-12-31\",\r\n    \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/discount-coupons",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"discount-coupons"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/discount-coupons/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('description');",
									"    pm.expect(responseData).to.have.property('discountPercentage');",
									"    pm.expect(responseData).to.have.property('validFrom');",
									"    pm.expect(responseData).to.have.property('validUntil');",
									"    pm.expect(responseData).to.have.property('isActive');",
									"});",
									"",
									"",
									"pm.test(\"Code is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"DiscountPercentage is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.discountPercentage).to.be.a('number').and.to.satisfy((val) => val >= 0, \"DiscountPercentage should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"ValidFrom and ValidUntil are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.validFrom).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    pm.expect(responseData.validUntil).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"code\": \"DESC01\",\r\n    \"description\": \"Test\",\r\n    \"discountPercentage\": 26.00,\r\n    \"validFrom\": \"2024-01-01\",\r\n    \"validUntil\": \"2024-12-31\",\r\n    \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/discount-coupons/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"discount-coupons",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/discount-coupons/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/discount-coupons/3",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"discount-coupons",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestion de Tickets de Soporte",
			"item": [
				{
					"name": "/api/support-tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(enrollment) {",
									"        pm.expect(enrollment).to.have.property('id');",
									"        pm.expect(enrollment).to.have.property('studentId');",
									"        pm.expect(enrollment).to.have.property('courseId');",
									"        pm.expect(enrollment).to.have.property('enrolledAt');",
									"        pm.expect(enrollment).to.have.property('status');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"EnrolledAt is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(enrollment) {",
									"        pm.expect(enrollment.enrolledAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id, studentId, and courseId are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(enrollment) {",
									"        pm.expect(enrollment.id).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(enrollment.studentId).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(enrollment.courseId).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/enrollments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/support-tickets/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('id', 'studentId', 'courseId', 'enrolledAt', 'status');",
									"});",
									"",
									"",
									"pm.test(\"EnrolledAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.enrolledAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"StudentId and courseId are non-negative integers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.studentId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"StudentId should be a non-negative integer\");",
									"  pm.expect(responseData.courseId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"CourseId should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/enrollments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"enrollments",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/support-tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('studentId');",
									"    pm.expect(responseData).to.have.property('courseId');",
									"    pm.expect(responseData).to.have.property('enrolledAt');",
									"    pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"EnrolledAt is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.enrolledAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"StudentId and courseId are non-negative integers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.studentId).to.be.a('number').and.to.be.at.least(0);",
									"  pm.expect(responseData.courseId).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n        \"studentId\": 21,\r\n        \"courseId\": 10,\r\n        \"enrolledAt\": \"2024-01-10T00:00:00Z\",\r\n        \"status\": \"Enabled\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/enrollments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/support-tickets/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('studentId');",
									"  pm.expect(responseData).to.have.property('courseId');",
									"  pm.expect(responseData).to.have.property('enrolledAt');",
									"  pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"EnrolledAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.enrolledAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"StudentId and courseId should be non-negative integers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.studentId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"StudentId should be a non-negative integer\");",
									"  pm.expect(responseData.courseId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"CourseId should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n        \"id\": 1,\r\n        \"studentId\": 21,\r\n        \"courseId\": 10,\r\n        \"enrolledAt\": \"2024-01-09T00:00:00Z\",\r\n        \"status\": \"Enabled\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/enrollments/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"enrollments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/support-tickets/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/course-categories/3",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-categories",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestion de Comentarios de Cursos",
			"item": [
				{
					"name": "/api/course-comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(comment) {",
									"        pm.expect(comment).to.include.all.keys('id', 'courseId', 'userId', 'commentText', 'rating', 'createdAt');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Comment text is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(comment) {",
									"    pm.expect(comment.commentText).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Comment text should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Rating is within the valid range\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(comment => {",
									"        pm.expect(comment.rating).to.be.a('number').within(0, 5);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(comment) {",
									"    pm.expect(comment.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/course-comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-comments/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('id', 'courseId', 'userId', 'commentText', 'rating', 'createdAt');",
									"});",
									"",
									"",
									"pm.test(\"Rating is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.rating).to.be.a('number');",
									"    pm.expect(responseData.rating).to.be.at.least(0, \"Rating should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"CommentText is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.commentText).to.be.a('string').and.to.have.lengthOf.at.least(1, \"CommentText should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/course-comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-comments",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('studentId');",
									"    pm.expect(responseData).to.have.property('courseId');",
									"    pm.expect(responseData).to.have.property('enrolledAt');",
									"    pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"EnrolledAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.enrolledAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"StudentId and courseId are non-negative integers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.studentId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"StudentId should be a non-negative integer\");",
									"  pm.expect(responseData.courseId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"CourseId should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n        \"studentId\": 21,\r\n        \"courseId\": 10,\r\n        \"enrolledAt\": \"2024-01-10T00:00:00Z\",\r\n        \"status\": \"Enabled\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/enrollments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-comments/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Id, courseId, userId, commentText, rating, and createdAt fields are present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('courseId');",
									"    pm.expect(responseData).to.have.property('userId');",
									"    pm.expect(responseData).to.have.property('commentText');",
									"    pm.expect(responseData).to.have.property('rating');",
									"    pm.expect(responseData).to.have.property('createdAt');",
									"});",
									"",
									"",
									"pm.test(\"Rating is within the valid range\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.rating).to.be.a('number');",
									"    pm.expect(responseData.rating).to.be.at.least(0);",
									"    pm.expect(responseData.rating).to.be.at.most(5);",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"courseId\": 10,\r\n    \"userId\": 17,\r\n    \"commentText\": \"Test\",\r\n    \"rating\": 5,\r\n    \"createdAt\": \"2024-02-15T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/course-comments/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-comments/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/course-comments/3",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-comments",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestion de Quizzes",
			"item": [
				{
					"name": "/api/course-quizzes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the quiz object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(quiz) {",
									"        pm.expect(quiz).to.be.an('object');",
									"        pm.expect(quiz.id).to.be.a('number');",
									"        pm.expect(quiz.courseId).to.be.a('number');",
									"        pm.expect(quiz.title).to.be.a('string');",
									"        pm.expect(quiz.description).to.be.a('string');",
									"        pm.expect(quiz.quizType).to.be.a('string');",
									"        pm.expect(quiz.createdAt).to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(quiz) {",
									"        pm.expect(quiz.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(quiz) {",
									"        pm.expect(quiz.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/course-quizzes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-quizzes"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-quizzes/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('courseId');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('description');",
									"    pm.expect(responseData).to.have.property('quizType');",
									"    pm.expect(responseData).to.have.property('createdAt');",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"QuizType is a valid type\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.quizType).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/course-quizzes/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-quizzes",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-quizzes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate id, courseId, title, description, quizType, and createdAt fields in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.courseId).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.title).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.description).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.quizType).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Title and description must be non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"QuizType is one of the expected values\", function () {",
									"    const validQuizTypes = [\"multiple choice\", \"true/false\", \"short answer\", \"essay\"];",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.quizType).to.exist.and.to.be.oneOf(validQuizTypes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": 1,\r\n    \"title\": \"Quiz 1 Curso 1\",\r\n    \"description\": \"Test\",\r\n    \"quizType\": \"Multiple Choice\",\r\n    \"createdAt\": \"2024-01-15T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/course-quizzes",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-quizzes"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-quizzes/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate response fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.courseId).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.title).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.description).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.quizType).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Title and description are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"QuizType is a valid type accepted by the API\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.quizType).to.be.oneOf([\"multiple_choice\", \"true_false\", \"short_answer\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"courseId\": 1,\r\n    \"title\": \"Quiz 1 Curso 1\",\r\n    \"description\": \"Test\",\r\n    \"quizType\": \"Multiple Choice\",\r\n    \"createdAt\": \"2024-01-15T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/course-quizzes/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-quizzes",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-quizzes/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/course-quizzes/3",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-quizzes",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestion de Respuestas de Quiz",
			"item": [
				{
					"name": "/api/quiz-responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the quiz response object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(response) {",
									"        pm.expect(response).to.be.an('object');",
									"        pm.expect(response).to.have.property('id');",
									"        pm.expect(response).to.have.property('quizId');",
									"        pm.expect(response).to.have.property('studentId');",
									"        pm.expect(response).to.have.property('selectedOption');",
									"        pm.expect(response).to.have.property('responseContent');",
									"        pm.expect(response).to.have.property('assignmentUrl');",
									"        pm.expect(response).to.have.property('submittedAt');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"SubmittedAt field is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(response) {",
									"        pm.expect(response.submittedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Id, quizId, and studentId are non-negative integers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(item.quizId).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(item.studentId).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/quiz-responses",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"quiz-responses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/quiz-responses/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.include.all.keys('id', 'quizId', 'studentId', 'selectedOption', 'responseContent', 'assignmentUrl', 'submittedAt');",
									"});",
									"",
									"",
									"pm.test(\"Id, quizId, and studentId are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Id should be a non-negative integer\");",
									"    pm.expect(responseData.quizId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"quizId should be a non-negative integer\");",
									"    pm.expect(responseData.studentId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"studentId should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"SubmittedAt is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.submittedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"SubmittedAt should be in valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/quiz-responses/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"quiz-responses",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/quiz-responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Presence of required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('quizId');",
									"    pm.expect(responseData).to.have.property('studentId');",
									"    pm.expect(responseData).to.have.property('selectedOption');",
									"    pm.expect(responseData).to.have.property('responseContent');",
									"    pm.expect(responseData).to.have.property('assignmentUrl');",
									"    pm.expect(responseData).to.have.property('submittedAt');",
									"});",
									"",
									"",
									"pm.test(\"Id, quizId, and studentId are non-negative integers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"  pm.expect(responseData.quizId).to.be.a('number').and.to.satisfy((quizId) => quizId >= 0, \"QuizId should be a non-negative integer\");",
									"  pm.expect(responseData.studentId).to.be.a('number').and.to.satisfy((studentId) => studentId >= 0, \"StudentId should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"SubmittedAt field is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.submittedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quizId\": 1,\r\n    \"studentId\": 19,\r\n    \"selectedOption\": \"A\",\r\n    \"responseContent\": \"Test\",\r\n    \"assignmentUrl\": \"http://archivo.com/entrega1\",\r\n    \"submittedAt\": \"2024-01-20T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/quiz-responses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"quiz-responses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/quiz-responses/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.include.all.keys('id', 'quizId', 'studentId', 'selectedOption', 'responseContent', 'assignmentUrl', 'submittedAt');",
									"});",
									"",
									"",
									"pm.test(\"Id, quizId, and studentId are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"    pm.expect(responseData.quizId).to.be.a('number').and.to.satisfy((quizId) => quizId >= 0, \"QuizId should be a non-negative integer\");",
									"    pm.expect(responseData.studentId).to.be.a('number').and.to.satisfy((studentId) => studentId >= 0, \"StudentId should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"SubmittedAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.submittedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"quizId\": 1,\r\n    \"studentId\": 19,\r\n    \"selectedOption\": \"A\",\r\n    \"responseContent\": \"Test\",\r\n    \"assignmentUrl\": \"http://archivo.com/entrega1\",\r\n    \"submittedAt\": \"2024-01-20T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/quiz-responses/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"quiz-responses",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/quiz-responses/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/quiz-responses/3",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"quiz-responses",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestion de Calificaciones",
			"item": [
				{
					"name": "/api/student-marks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the response object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('quizId');",
									"        pm.expect(item).to.have.property('studentId');",
									"        pm.expect(item).to.have.property('mark');",
									"        pm.expect(item).to.have.property('comments');",
									"        pm.expect(item).to.have.property('gradedAt');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Id, QuizId, StudentId, and Mark fields are present and have valid values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id').that.is.a('number');",
									"        pm.expect(item).to.have.property('quizId').that.is.a('number');",
									"        pm.expect(item).to.have.property('studentId').that.is.a('number');",
									"        pm.expect(item).to.have.property('mark').that.is.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Comments and gradedAt fields are optional and can be empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.comments).to.exist;",
									"        pm.expect(item.gradedAt).to.exist;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/student-marks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"student-marks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/student-marks/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the id, quizId, studentId, mark, comments, and gradedAt fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.quizId).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.studentId).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.mark).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.comments).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.gradedAt).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Mark is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.mark).to.be.a('number');",
									"    pm.expect(responseData.mark).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"GradedAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.gradedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/student-marks/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"student-marks",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/student-marks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.include.all.keys('id', 'quizId', 'studentId', 'mark', 'comments', 'gradedAt');",
									"});",
									"",
									"",
									"pm.test(\"Mark is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.mark).to.be.a('number');",
									"    pm.expect(responseData.mark).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"GradedAt is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.gradedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"GradedAt should be in valid date format\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quizId\": 1,\r\n    \"studentId\": 19,\r\n    \"mark\": 87.07,\r\n    \"comments\": \"Buen trabajo\",\r\n    \"gradedAt\": \"2024-01-21T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/student-marks",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"student-marks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/student-marks/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate response fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.quizId).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.studentId).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.mark).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.comments).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.gradedAt).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Mark is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.mark).to.be.a('number');",
									"    pm.expect(responseData.mark).to.be.at.least(0, \"Mark should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"GradedAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.gradedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"quizId\": 1,\r\n    \"studentId\": 19,\r\n    \"mark\": 87.07,\r\n    \"comments\": \"Test\",\r\n    \"gradedAt\": \"2024-01-21T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/student-marks/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"student-marks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/student-marks/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/student-marks/3",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"student-marks",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestion de Contenido de Cursos",
			"item": [
				{
					"name": "/api/course-contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('courseId');",
									"        pm.expect(item).to.have.property('title');",
									"        pm.expect(item).to.have.property('contentType');",
									"        pm.expect(item).to.have.property('url');",
									"        pm.expect(item).to.have.property('orderIndex');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"URL must be in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.url).to.match(/^http(s)?:\\/\\/.+/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"OrderIndex is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.orderIndex).to.be.a('number');",
									"        pm.expect(item.orderIndex).to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/course-contents",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-contents"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-contents/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('courseId');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('contentType');",
									"    pm.expect(responseData).to.have.property('url');",
									"    pm.expect(responseData).to.have.property('orderIndex');",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"URL is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.url).to.match(/^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/);",
									"});",
									"",
									"",
									"pm.test(\"OrderIndex is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.orderIndex).to.be.a('number');",
									"  pm.expect(responseData.orderIndex).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/course-contents/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-contents",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.courseId).to.exist;",
									"    pm.expect(responseData.title).to.exist;",
									"    pm.expect(responseData.contentType).to.exist;",
									"    pm.expect(responseData.url).to.exist;",
									"    pm.expect(responseData.orderIndex).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Url is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.url).to.match(/^https?:\\/\\/www\\..+/);",
									"});",
									"",
									"",
									"pm.test(\"OrderIndex is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.orderIndex).to.be.a('number');",
									"  pm.expect(responseData.orderIndex).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": 1,\r\n    \"title\": \"¿Qué es un robot?\",\r\n    \"contentType\": \"Video\",\r\n    \"url\": \"https://www.youtube.com/watch?v=-wED6SbZnY0\",\r\n    \"orderIndex\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/course-contents",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-contents"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-contents/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('courseId');",
									"  pm.expect(responseData).to.have.property('title');",
									"  pm.expect(responseData).to.have.property('contentType');",
									"  pm.expect(responseData).to.have.property('url');",
									"  pm.expect(responseData).to.have.property('orderIndex');",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content type is one of the expected values\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.contentType).to.exist.and.to.satisfy(function (value) {",
									"    const expectedValues = [\"video\", \"article\", \"quiz\"];",
									"    return expectedValues.includes(value);",
									"  }, \"Content type should be one of 'video', 'article', or 'quiz'\");",
									"});",
									"",
									"",
									"pm.test(\"Order index is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('orderIndex').that.is.a('number').and.is.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"courseId\": 1,\r\n    \"title\": \"Test\",\r\n    \"contentType\": \"Video\",\r\n    \"url\": \"https://www.youtube.com/watch?v=-wED6SbZnY0\",\r\n    \"orderIndex\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/course-contents/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-contents",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-contents/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/course-contents/3",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-contents",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestion de Preguntas de Quiz",
			"item": [
				{
					"name": "/api/course-quiz-questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the response object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(question) {",
									"        pm.expect(question).to.have.property('id');",
									"        pm.expect(question).to.have.property('quizId');",
									"        pm.expect(question).to.have.property('questionText');",
									"        pm.expect(question).to.have.property('optionA');",
									"        pm.expect(question).to.have.property('optionB');",
									"        pm.expect(question).to.have.property('optionC');",
									"        pm.expect(question).to.have.property('optionD');",
									"        pm.expect(question).to.have.property('optionE');",
									"        pm.expect(question).to.have.property('correctAnswer');",
									"        pm.expect(question).to.have.property('correctOption');",
									"        pm.expect(question).to.have.property('orderIndex');",
									"        pm.expect(question).to.have.property('createdAt');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"All fields in the response are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    responseData.forEach(function(question) {",
									"        pm.expect(question.id).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.quizId).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.questionText).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.optionA).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.optionB).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.optionC).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.optionD).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.optionE).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.correctAnswer).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.correctOption).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.orderIndex).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(question.createdAt).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Order index is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"    ",
									"    responseData.forEach(function(question) {",
									"        pm.expect(question.orderIndex).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/course-quiz-questions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-quiz-questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-quiz-questions/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id, quizId, and orderIndex fields should exist and be of the correct type\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.quizId).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.orderIndex).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"All specified fields are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    ['questionText', 'optionA', 'optionB', 'optionC', 'optionD', 'optionE', 'correctAnswer', 'correctOption', 'createdAt'].forEach(field => {",
									"        pm.expect(responseData[field]).to.be.a('string').and.to.have.lengthOf.at.least(1, `${field} should not be empty`);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response does not contain any unexpected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    const expectedFields = [\"id\", \"quizId\", \"questionText\", \"optionA\", \"optionB\", \"optionC\", \"optionD\", \"optionE\", \"correctAnswer\", \"correctOption\", \"orderIndex\", \"createdAt\"];",
									"    const actualFields = Object.keys(responseData);",
									"    ",
									"    pm.expect(actualFields).to.have.members(expectedFields);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/course-quiz-questions/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-quiz-questions",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-quiz-questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id, quizId, and orderIndex fields should exist and be of the correct type\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    pm.expect(responseData).to.have.property('id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('quizId').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('orderIndex').that.is.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Question properties are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  ['questionText', 'optionA', 'optionB', 'optionC', 'optionD', 'optionE', 'correctAnswer', 'correctOption'].forEach(property => {",
									"    pm.expect(responseData[property]).to.be.a('string').and.to.have.lengthOf.at.least(1, `${property} should not be empty`);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quizId\": 1,\r\n    \"questionText\": \"¿Cuál es la respuesta correcta?\",\r\n    \"optionA\": \"Opción A\",\r\n    \"optionB\": \"Opción B\",\r\n    \"optionC\": \"Opción C\",\r\n    \"optionD\": \"Opción D\",\r\n    \"optionE\": \"Opción E\",\r\n    \"correctAnswer\": \"Texto correcto\",\r\n    \"correctOption\": \"A\",\r\n    \"orderIndex\": 1,\r\n    \"createdAt\": \"2024-01-16T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/course-quiz-questions",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-quiz-questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-quiz-questions/{id}",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"quizId\": 1,\r\n    \"questionText\": \"¿Cuál es la respuesta correcta?\",\r\n    \"optionA\": \"Opción A\",\r\n    \"optionB\": \"Opción B\",\r\n    \"optionC\": \"Opción C\",\r\n    \"optionD\": \"Opción D\",\r\n    \"optionE\": \"Opción E\",\r\n    \"correctAnswer\": \"Test\",\r\n    \"correctOption\": \"A\",\r\n    \"orderIndex\": 1,\r\n    \"createdAt\": \"2024-01-16T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/course-quiz-questions/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-quiz-questions",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/course-quiz-questions/{id}",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/course-quiz-questions/3",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"course-quiz-questions",
								"3"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1",
			"type": "default"
		}
	]
}